package dataaccesslayer; // Assuming this is your DAO package

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import transportobjects.MaintenanceTaskDTO; // Import your DTO

/**
 * Data Access Object (DAO) for the MaintenanceTask table.
 * Handles database operations related to MaintenanceTaskDTO objects.
 */
public class MaintenanceDAO {

    // Assuming DataSource.INSTANCE.getConnection() provides a valid Connection
    // You might need to adjust this based on your actual DataSource implementation.

    /**
     * Retrieves all maintenance tasks from the database.
     *
     * @return An ArrayList of MaintenanceTaskDTO objects, or null if no tasks are found.
     * @throws Exception if a SQL error occurs during the operation or if the status string is invalid.
     */
    public ArrayList<MaintenanceTaskDTO> getAll() throws Exception {
        String query = "SELECT TaskID, Description, Status FROM MaintenanceTask"; // SQL query to select all tasks
        
        Connection conn = null; 
        
        conn = DataSource.INSTANCE.getConnection();
        
        ArrayList<MaintenanceTaskDTO> tasks = new ArrayList<>(); 

        try (PreparedStatement stmt = conn.prepareStatement(query)) { 
            try (ResultSet results = stmt.executeQuery()) { 
                while (results.next()) { 
                    MaintenanceTaskDTO task = new MaintenanceTaskDTO();
                    task.setTaskId(results.getInt("TaskID"));
                    task.setDescription(results.getString("Description"));
                    task.setStatus(MaintenanceStatus.fromString(results.getString("Status")));
                    tasks.add(task); 
                }
            } catch (SQLException e) {
                e.printStackTrace(); // Print stack trace for debugging
                throw new Exception("MaintenanceDAO::getAll -- SQL query failed: " + e.getMessage(), e);
            } catch (IllegalArgumentException e) {
                e.printStackTrace();
                throw new Exception("MaintenanceDAO::getAll -- Invalid status found in database: " + e.getMessage(), e);
            }
        } catch (SQLException e) {
            // Catch and rethrow SQLException as a custom Exception for PreparedStatement creation
            throw new Exception("MaintenanceDAO::getAll -- SQL operation failed: " + e.getMessage(), e);
        } 
        return (tasks.isEmpty()) ? null : tasks;
    }

    /**
     * Creates a new maintenance task in the database.
     * The TaskID is auto-generated by the database.
     *
     * @param dto The MaintenanceTaskDTO object containing the data to be inserted.
     * @throws Exception if a SQL error occurs during the operation or no rows are affected.
     */
    public void create(MaintenanceTaskDTO dto) throws Exception {
        String query = "INSERT INTO MaintenanceTask (Description, Status) VALUES (?, ?)";

        Connection conn = null;
        
        conn = DataSource.INSTANCE.getConnection();

        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, dto.getDescription());
            stmt.setString(2, dto.getStatus().name()); // Convert enum to String for DB

            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected == 0) {
                throw new Exception("MaintenanceDAO::create -- No rows affected, task not created.");
            }
        } catch (SQLException e) {
            throw new Exception("MaintenanceDAO::create -- SQL operation failed: " + e.getMessage(), e);
        }
    }
    
    
    /**
     * Deletes a maintenance task from the database by its ID.
     *
     * @param id The ID of the maintenance task to delete.
     * @return true if the task was successfully deleted (one row affected), false otherwise.
     * @throws Exception if a SQL error occurs during the operation.
     */
    public boolean delete(int id) throws Exception {
        String query = "DELETE FROM MaintenanceTask WHERE TaskID = ?";
       
        Connection conn = DataSource.INSTANCE.getConnection();
        boolean deleted = false;
 
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                deleted = true;
            } else {
                System.out.println("MaintenanceDAO::delete -- No maintenance task found with ID: " + id);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new Exception("MaintenanceDAO::delete -- SQL operation failed: " + e.getMessage(), e);
        }
        return deleted;
    }//~ delete(...)
}
